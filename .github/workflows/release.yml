on:
  push:
    tags:
      - "v*"

env:
  ARTIFACT_PATH: C:/AppPackage/
  OUTPUT_PATH: C:/Release/
  CERTIFICATE_PATH: "cert.pfx"

jobs:
  test:
    uses: ./.github/workflows/ci.yml

  get-version:
    runs-on: windows-2022
    outputs:
      version: ${{ steps.extract-version.outputs.version }}
      shortVersion: ${{ steps.extract-version.outputs.shortVersion }}
    steps:
      - uses: olegtarasov/get-tag@v2.1
        id: tagName
        with:
          tagRegex: "v(.*)"
          tagRegexGroup: 1
      - id: extract-version
        name: Extract version number
        shell: powershell
        run: |
          $parts = @("${{ steps.tagName.outputs.tag }}" -split "-")
          $version = $parts[0]
          $channel = if ($parts[1]) {$parts[1]} else {""}
          $revision = $channel.GetEnumerator() | % { [int] $_ } | Measure -Sum | Select -ExpandProperty Sum
          $parsedVersion = [Version] $version
          $packageVersion = New-Object Version @($parsedVersion.Major, $parsedVersion.Minor, $parsedVersion.Build, $revision)
          [string] $strVersion = $packageVersion.ToString(4)
          [string] $strShortVersion = $packageVersion.ToString(3)
          echo "::set-output name=version::$strVersion"
          echo "::set-output name=shortVersion::$strShortVersion"

  build:
    runs-on: windows-2022
    needs: [test, get-version]
    strategy:
      matrix:
        project:
          [
            {
              name: "PackageInstaller",
              path: "PackageInstaller/PackageInstaller.csproj",
            },
          ]
        platform: ["x86", "x64", "arm64"]
    steps:
      - uses: actions/checkout@v2
      - name: Setup .NET SDKs
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1
        with:
          msbuild-architecture: x64
          vs-version: 17
          vs-prerelease: true
      - name: Update Manifest version string
        shell: powershell
        run: |
          $manifestPath = "$env:PROJ_PATH\..\Package.appxmanifest"
          [xml]$manifest = Get-Content $manifestPath
          $manifest.Package.Identity.Version = "${{ needs.get-version.outputs.version }}"
          $manifest.save($manifestPath)
        env:
          TAG_NAME: ${{ steps.tagName.outputs.tag }}
          PROJ_PATH: ${{ matrix.project.path }}
      - name: Extract certificate
        shell: bash
        run: echo "${{ secrets.APPX_CERTIFICATE }}" | base64 -d > ${{ env.CERTIFICATE_PATH }}
      - name: Package msix
        run: |
          msbuild "${{ env.PROJ_PATH }}" /t:Build /restore /m /p:Configuration=Release /p:AppxPackageDir="${{ env.ARTIFACT_PATH }}" /p:UapAppxPackageBuildMode=SideloadOnly `
          /p:Version="$env:TAG_NAME" /p:AppxBundle=Never /p:AppxBundlePlatforms="${{ env.PLATFORM }}" /p:GenerateAppxPackageOnBuild=true `
          /p:AppxAutoIncrementPackageRevision=false /p:PackageCertificateKeyFile="${{ env.CERTIFICATE_PATH }}" `
          /p:PackageCertificatePassword="${{ secrets.APPX_CERTIFICATE_PASSWORD }}" /p:UseSubFolderForOutputDirDuringMultiPlatformBuild=false
        env:
          TAG_NAME: ${{ steps.tagName.outputs.tag }}
          PROJ_PATH: ${{ matrix.project.path }}
          PLATFORM: ${{ matrix.platform }}
      - name: Upload platform build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.project.name }}-platforms # each job will extend the artifact upload with new platform specific files
          path: |
            ${{ env.ARTIFACT_PATH }}/*/*.msix
            ${{ env.ARTIFACT_PATH }}/*/*.msixsym

  bundle:
    runs-on: windows-2022
    needs: [build, get-version]
    strategy:
      matrix:
        project-name: ["PackageInstaller"]
    steps:
      - uses: GuillaumeFalourd/setup-windows10-sdk-action@v1.6
        with:
          sdk-version: 20348
      - run: mkdir "${{ env.ARTIFACT_PATH }}"
      - uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.project-name }}-platforms
          path: ${{ env.ARTIFACT_PATH }}
      - name: Extract certificate
        shell: bash
        run: echo "${{ secrets.APPX_CERTIFICATE }}" | base64 -d > ${{ env.CERTIFICATE_PATH }}
      - name: Bundle all msix files
        uses: LanceMcCarthy/Action-MsixBundler@vX.X.X
        with:
          msix-folder: "${{ env.ARTIFACT_PATH }}"
          msixbundle-filepath: "${{ env.ARTIFACT_PATH }}/${{ matrix.project-name }}.msixbundle"
          msixbundle-version: "${{ needs.get-version.outputs.version }}"
          enable-bundle-signing: true
          certificate-path: ${{ env.CERTIFICATE_PATH }}
          certificate-private-key: ${{ secrets.APPX_CERTIFICATE_PASSWORD }}
      - name: Create msixupload
        run: |
          7z a -mx9 -tzip "${{ env.ARTIFACT_PATH }}/${{ matrix.project-name }}.msixupload" "${{ env.ARTIFACT_PATH }}/*.msixsym" "${{ env.ARTIFACT_PATH }}/*.msixbundle"
      - name: Upload bundle artifact
        uses: actions/upload-artifact@v2
        with:
          name: bundle # each job will extend the artifact upload with new bundled files
          path: |
            ${{ env.ARTIFACT_PATH }}/*.msixbundle
            ${{ env.ARTIFACT_PATH }}/*.msixupload

  publish:
    runs-on: windows-2022
    needs: bundle
    steps:
      - uses: olegtarasov/get-tag@v2.1
        id: tagName
        with:
          tagRegex: "v(.*)"
          tagRegexGroup: 1
      - uses: actions/checkout@v2
      - name: Extract release notes
        run: |
          git log --pretty=format:'%d %s' ${GITHUB_REF} | perl -pe 's| \(.*tag: v(\d+.\d+.\d+(-preview\d{3})?)(, .*?)*\)|\n## \1\n|g' > ./RELEASE-NOTES.txt; if (-! $?) { exit 1 } else { exit $LastExitCode }
      - name: Create release message
        run: |
          echo "`n`nIt is recommended to install it from [Microsoft Store](https://www.microsoft.com/store/apps/9N9MX3J3F4G0)." | Out-File -Append ./RELEASE-NOTES.txt; if (-! $?) { exit 1 } else { exit $LastExitCode }
      - uses: actions/download-artifact@v3
        with:
          name: bundle
          path: ${{ env.OUTPUT_PATH }}
      - name: Attach files to Github releases
        uses: softprops/action-gh-release@v1
        with:
          files: "${{ env.OUTPUT_PATH }}/*"
          prerelease: ${{ contains(steps.tagName.outputs.tag, '-') }}
          body_path: "./RELEASE-NOTES.txt"
