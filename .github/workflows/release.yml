on:
  push:
    tags:
      - "v*"

jobs:
  test:
    uses: ./.github/workflows/ci.yml

  publish:
    runs-on: windows-2022
    needs: test
    strategy:
      matrix:
        packaging-project: ["Winstrumenta.Package/Winstrumenta.Package.wapproj"]
    env:
      ARTIFACT_PATH: C:\AppPackage
      OUTPUT_PATH: C:\Release
      CERTIFICATE_PATH: "cert.pfx"
    steps:
      - uses: olegtarasov/get-tag@v2.1
        id: tagName
        with:
          tagRegex: "v(.*)"
          tagRegexGroup: 1
      - uses: actions/checkout@v2
      - name: Extract release notes
        run: |
          git log --pretty=format:'%d %s' ${GITHUB_REF} | perl -pe 's| \(.*tag: v(\d+.\d+.\d+(-preview\d{3})?)(, .*?)*\)|\n## \1\n|g' > ./RELEASE-NOTES.txt; if (-! $?) { exit 1 } else { exit $LastExitCode }
      - name: Setup .NET SDKs
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x
          include-prerelease: true
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1
        with:
          msbuild-architecture: x64
          vs-version: 17
          vs-prerelease: true
      - name: Update Manifest version string
        shell: powershell
        run: |
          # Update appxmanifest. This must be done before the build.
          $manifestPath = "$env:PROJ_PATH\..\Package.appxmanifest"
          [xml]$manifest = Get-Content $manifestPath
          $manifest.Package.Identity.Version = "$env:TAG_NAME.0"    
          $manifest.save($manifestPath)
        env:
          TAG_NAME: ${{ steps.tagName.outputs.tag }}
          PROJ_PATH: ${{ matrix.packaging-project }}
      - name: Extract certificate
        shell: bash
        run: echo "${{ secrets.APPX_CERTIFICATE }}" | base64 -d > ${{ env.CERTIFICATE_PATH }}
      - name: Package msix
        run: |
          msbuild "$env:PROJ_PATH" /t:Build /restore /m /p:Configuration=Release /p:AppxPackageDir="$env:ARTIFACT_PATH" /p:UapAppxPackageBuildMode=StoreUpload `
          /p:Version="$env:TAG_NAME" /p:AppxBundle=Always /p:AppxBundlePlatforms="x86|x64|arm64" `
          /p:AppxAutoIncrementPackageRevision=false /p:PackageCertificateKeyFile="${{ env.CERTIFICATE_PATH }}" `
          /p:PackageCertificatePassword="${{ secrets.APPX_CERTIFICATE_PASSWORD }}" /p:UseSubFolderForOutputDirDuringMultiPlatformBuild=false
        env:
          TAG_NAME: ${{ steps.tagName.outputs.tag }}
          PROJ_PATH: ${{ matrix.packaging-project }}
      - name: Prepare release files
        run: |
          $Folder = $(Get-ChildItem -Path "$env:ARTIFACT_PATH" -Filter "*_Test").FullName
          7z a -mx9 -tzip "$env:OUTPUT_PATH/${env:TAG_NAME}-Sideload.zip" "$Folder/*"
          Get-ChildItem -Path "$env:ARTIFACT_PATH" -Filter "*.msixupload" | Copy-Item -Destination $env:OUTPUT_PATH
        env:
          TAG_NAME: ${{ steps.tagName.outputs.tag }}
      - name: Attach files to Github releases
        uses: softprops/action-gh-release@v1
        with:
          files: "${{ env.OUTPUT_PATH }}/*"
          body_path: "./RELEASE-NOTES.txt"
